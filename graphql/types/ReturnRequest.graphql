input ReturnRequestInput {
  orderId: String!
  items: [ReturnRequestItemInput!]!
  customerProfileData: CustomerProfileDataInput!
  pickupReturnData: PickupReturnDataInput!
  refundPaymentData: RefundPaymentDataInput!
  userComment: String
}

input ReturnRequestItemInput {
  orderItemIndex: Int!
  quantity: Int!
  condition: ItemCondition!
  returnReason: ReturnReasonInput!
}

input ReturnReasonInput {
  reason: String!
  otherReason: String
}

enum ItemCondition {
  newWithBox
  newWithoutBox
  usedWithBox
  usedWithoutBox
}

input CustomerProfileDataInput {
  name: String!
  """
  email: If it is not provided, the email from session will be used. When calling from store front, it's ok not pass, but calling from GraphQL IDE or Postman, it's required.
  """
  email: String
  phoneNumber: String!
}

input PickupReturnDataInput {
  addressId: String!
  address: String!
  city: String!
  state: String!
  country: String!
  zipCode: String!
  addressType: AddressType!
}

enum AddressType {
  PICKUP_POINT
  CUSTOMER_ADDRESS
}

input RefundPaymentDataInput {
  refundPaymentMethod: RefundPaymentMethod!
  iban: String
  accountHolderName: String
}

enum RefundPaymentMethod {
  bank
  card
  giftCard
  sameAsPurchase
}

type ReturnRequestResponse {
  id: ID!
  orderId: String!
  refundableAmount: Int!
  sequenceNumber: String!
  createdIn: String!
  status: Status!
  dateSubmitted: String!
  userComment: String
  refundableAmountTotals: [RefundableAmountTotal!]!
  customerProfileData: CustomerProfileData!
  pickupReturnData: PickupReturnData!
  refundPaymentData: RefundPaymentData!
  items: [ReturnRequestItem!]!
  refundData: RefundData
  refundStatusData: [RefundStatusData!]!
}

enum Status {
  new
  processing
  pickedUpFromClient
  pendingVerification
  packageVerified
  amountRefunded
  denied
}

type CustomerProfileData {
  userId: String!
  name: String!
  email: String!
  phoneNumber: String!
}

type PickupReturnData {
  addressId: String!
  address: String!
  city: String!
  state: String!
  country: String!
  zipCode: String!
  addressType: AddressType!
  returnLabel: String
}

type RefundPaymentData {
  refundPaymentMethod: RefundPaymentMethod!
  iban: String
  accountHolderName: String
}

type ReturnRequestItem {
  orderItemIndex: Int!
  quantity: Int!
  condition: ItemCondition!
  returnReason: ReturnReason!
  """
  id: SKU id
  """
  id: String!
  sellingPrice: Int!
  tax: Int!
}

type ReturnReason {
  reason: String!
  otherReason: String
}

type RefundData {
  invoiceNumber: String!
  invoiceValue: String!
  refundedItemsValue: Int!
  refundedShippingValue: Int!
  giftCard: GiftCard
  items: [RefundItem!]!
}

type GiftCard {
  id: String
  code: String
}

type RefundItem {
  orderItemIndex: Int!
  quantity: Int!
  restockFee: Int
}

type RefundStatusData {
  status: Status!
  submittedBy: String!
  createdAt: String!
  comments: [RefundStatusComment!]!
}

type RefundStatusComment {
  comment: String!
  createdAt: String!
  visibleForCustomer: Boolean
  submittedBy: String!
}

input ReturnRequestFilters {
  status: Status
  sequenceNumber: String
  id: String
  createdIn: DateRangeInput
  orderId: String
}

input DateRangeInput {
  from: String!
  to: String!
}

type ReturnRequestList {
  list: [ReturnRequestResponse!]
  paging: Pagination
}

input RefundDataInput {
  items: [RefundItemInput!]!
  refundedShippingValue: Int!
}

input RefundItemInput {
  orderItemIndex: Int!
  quantity: Int!
  restockFee: Int!
}

input ReturnRequestCommentInput {
  value: String!
  visibleForCustomer: Boolean!
}

type RefundableAmountTotal {
  id: RefundableAmountId!
  value: Int!
}

enum RefundableAmountId {
  items
  shipping
  tax
}
